{"componentChunkName":"component---src-templates-post-jsx","path":"/blog/how-i-audit-builds","result":{"data":{"markdownRemark":{"html":"<p>Accessibility isn't just a technical issue. It's a design issue. It's a content issue. It's something that every department that touches a website should think about.</p>\n<p><a href=\"http://empat.io/\">Accessibility is about people</a>. Not people with disabilities.</p>\n<p>I see an audit as a way to correct issues prior to a website going live.</p>\n<h2>First steps</h2>\n<p>Due to time constraints, I almost always try and build in accessibility and usability from the off. That way, an important part of how a website should be built isn't left out.</p>\n<p>At the end of a project I check the website for glaring issues from a build point of view. I prefer to do this once a client has populated everything as how they populate can also affect accessibility.</p>\n<p><a href=\"https://chrome.google.com/webstore/detail/accessibility-developer-t/fpkknkljclfencbdbgkenhalefipecmb?hl=en\">Google Chromes Accessibility Developer Tools</a> is brilliant for spotting these glaring issues. I usually run an accessibility audit from console and fix any issues that arise.</p>\n<p>Testing a website with real disabled users is the only way to ensure it offers optimum accessibility but I realise that this option isn't always available.</p>\n<h2>Colour Contrast</h2>\n<p>I check for colour contrast issues using <a href=\"http://webaim.org/resources/contrastchecker/\">Webaims checker</a> before anything else. Usually I can eyeball if something is bad and try to aim for WCAG AA.</p>\n<p>If accessibility fails badly to the point that even I myself am struggling, I will pass these issues back to the designers for a rework.</p>\n<h2>Keyboard Testing</h2>\n<p>I personally rarely use a mouse. I have one at work but prefer the keyboard. At home I don't use a mouse. Keyboard testing for the most part is easy. Developers tend to develop for themselves which usually means a lack of visual feedback upon tabbing through a website.\r\nMy approach to testing is usually just using my keyboard to navigate around the website. It's as simple as that.</p>\n<h2>Screen Readers &#x26; Assistive Technologies</h2>\n<p>Testing content with a screen reader is made easy by using <a href=\"https://chrome.google.com/webstore/detail/chromevox/kgejglhpjiefppelpmljglcjbhoiplfn?hl=en\">Chrome Vox</a>. Anything that doesn't make sense verbally, gets fixed.</p>\n<h2>Headings</h2>\n<p>I begin testing by using the <a href=\"https://chrome.google.com/webstore/detail/html5-outliner/afoibpobokebhgfnknfndkgemglggomo/related\">HTML5 Outliner tool</a> from the Google store. Read my <a href=\"https://emily.ghost.io/document-outlines/\">previous post</a> to learn more about heading structure.</p>","timeToRead":2,"excerpt":"Accessibility isn't just a technical issue. It's a design issue. It's a content issue. It's something that every department that touches aâ€¦","frontmatter":{"title":"How I audit builds","date":"22. July 2016","category":"Accessibility"},"fields":{"slug":"/blog/how-i-audit-builds","sourceInstanceName":"blog"}}},"pageContext":{"slug":"/blog/how-i-audit-builds","left":{"frontmatter":{"category":"User Experience","title":"How to Ruin An Experience"},"fields":{"slug":"/blog/how-to-ruin-an-experience"}},"right":{"frontmatter":{"category":"Accessibility","title":"When To Use Buttons"},"fields":{"slug":"/blog/when-to-use-buttons"}}}},"staticQueryHashes":[]}